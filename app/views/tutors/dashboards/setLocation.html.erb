<!-- stops the InvalidAuthenticityToken error -->
<%= csrf_meta_tags %>
<p>Drag the bee marker to the location you want prospective students to see. <br>
Choose an area close to you, but be aware this is shared publicly so don't use your
home address.</p>
<input id="autocomplete" placeholder="Enter a city" type="text"> &nbsp;or
<button class= 'btn' id = 'useloc'>Use My Location</button>
<br />
<div id="map"></div>
<%= form_tag('setLocation')  %>
<%= hidden_field_tag :authenticity_token, form_authenticity_token %>
<%= hidden_field_tag 'location', params[:location] %>
<%= submit_tag "Set Location" %>
<script>
    // Note: This example requires that you consent to location sharing when
    // prompted by your browser. If you see the error "The Geolocation service
    // failed.", it means you probably did not give permission for the browser to
    // locate you.
  var map, places, infoWindow;
   var autocomplete;
   var marker;
     // Try HTML5 geolocation.
     $('#useloc').click(function() {
         getLocationGeo();
    });
    function initMap() {
      //initialise map
      map = new google.maps.Map(document.getElementById('map'), {
        center: {lat: 54.8, lng: -4.6},
        zoom: 5,
        maxZoom: 14
      });

      infoWindow = new google.maps.InfoWindow;
      marker = new google.maps.Marker;
      var icon = {
      url: "<%= asset_path('beelogo.png') %>",
      scaledSize: new google.maps.Size(50, 50)// scaled size
    };
    marker = new google.maps.Marker({
      position: {lat: 51.243781, lng: -0.589525},
      map: map,
      title: 'Your location',
      icon: icon,
      //draggable so that the user can drag the icon to their location
      draggable: true
    });

  // Create the autocomplete object and associate it with the UI input control.
      // Restrict the search to the default country, and to place type "cities".
      autocomplete = new google.maps.places.Autocomplete(
          /** @type {!HTMLInputElement} */ (
              document.getElementById('autocomplete')), {
            types: ['(cities)'],
            componentRestrictions: countryRestrict
          });
      places = new google.maps.places.PlacesService(map);

      autocomplete.addListener('place_changed', onPlaceChanged);


}
   function getLocationGeo(){
     //if geolocation succeeds center the map on the location
    if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(function(position) {
          var pos = {
            lat: position.coords.latitude,
            lng: position.coords.longitude
          };
            initMap();

          map.setCenter(pos);
          map.setZoom(13);
          marker.setPosition(map.getCenter());

        }, function() {
          handleLocationError(true, infoWindow, map.getCenter());

        });
      } else {
        // Browser doesn't support Geolocation
        handleLocationError(false, infoWindow, map.getCenter());
      }


    function handleLocationError(browserHasGeolocation, infoWindow, pos) {
      infoWindow.setPosition(pos);
      infoWindow.setContent(browserHasGeolocation ?
                            '<h4>Error: The Geolocation service failed. Ensure you are using a HTTPS connection</h4>' :
                            '<h4>Error: Your browser doesn\'t support geolocation.</h4>');
      infoWindow.open(map);
    }
   };

  var countryRestrict = {'country': 'uk'};

    // When the user selects a city, get the place details for the city and
    // zoom the map in on the city.
    function onPlaceChanged() {
      var place = autocomplete.getPlace();
      if (place.geometry) {
        map.panTo(place.geometry.location);
        map.setZoom(13);
        marker.setPosition(map.getCenter());
        userPos = marker.getPosition();
        $('#location').val(userPos);
      } else {
        document.getElementById('autocomplete').placeholder = 'Enter a city';
      }
    }

    //save the user's location when button is pressed
    $('#map').click(function() {
        userPos = marker.getPosition();
        $('#location').val(userPos);
   });

  </script>
  <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDN7VGKV5VcNNsh5bgwx1TCK-iOpK1k-6c&libraries=places&callback=initMap"
      async defer></script>
